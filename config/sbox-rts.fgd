
@BaseClass = BaseProperties_sbox_rts
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// Gamelib.FlowFields.Entities.FlowFieldBlocker
//
@SolidClass base(BaseProperties_sbox_rts) 
metadata
{
	auto_apply_material = "materials/rts/hammer/flowfield_blocker.vmat"
	entity_tool_name = "Blocker"
	entity_tool_group = "FlowField"
}
= flowfield_blocker : "Blocks off areas that players should not be able to access."
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Gamelib.FlowFields.Entities.FlowFieldGround
//
@SolidClass base(BaseProperties_sbox_rts) 
metadata
{
	auto_apply_material = "materials/rts/hammer/flowfield_ground.vmat"
	entity_tool_name = "Ground"
	entity_tool_group = "FlowField"
}
= flowfield_ground : "The main component needed for the flowfield to work, basically works as a nav mesh. Must be placed over all the playable space."
[
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// Gamelib.DayNight.DayNightAmbience
//
@PointClass base(BaseProperties_sbox_rts) iconsprite( "editor/snd_daynight.vmat" ) 
metadata
{
	entity_tool_name = "Ambience"
	entity_tool_group = "Day and Night"
}
= daynight_ambience : "An audio controller for when a looping sound should play at each point in the day"
[
	dawnambience(sound) : "Dawn Ambient Sound" :  : ""
	dayambience(sound) : "Day Ambient Sound" :  : ""
	duskambience(sound) : "Dusk Ambient Sound" :  : ""
	nightambience(sound) : "Night Ambient Sound" :  : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// Gamelib.DayNight.DayNightController
//
@PointClass base(BaseProperties_sbox_rts) iconsprite( "editor/daynight_controller.vmat" ) 
metadata
{
	entity_tool_name = "Controller"
	entity_tool_group = "Day and Night"
}
= daynight_controller : "A way to set the colour based on the time of day, it will smoothly blend between each colour when the time has changed. Also enables the day night cycle using a \"light_environment\""
[
	dawncolor(color255) : "Dawn Color" :  : ""
	dawnskycolor(color255) : "Dawn Sky Color" :  : ""
	daycolor(color255) : "Day Color" :  : ""
	dayskycolor(color255) : "Day Sky Color" :  : ""
	duskcolor(color255) : "Dusk Color" :  : ""
	duskskycolor(color255) : "Dusk Sky Color" :  : ""
	nightcolor(color255) : "Night Color" :  : ""
	nightskycolor(color255) : "Night Sky Color" :  : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnBecomeNight(void) : ""
	output OnBecomeDusk(void) : ""
	output OnBecomeDawn(void) : ""
	output OnBecomeDay(void) : ""
]

//
// Gamelib.DayNight.DayNightProp
//
@PointClass base(BaseProperties_sbox_rts) model() 
metadata
{
	entity_tool_name = "Material Prop"
	entity_tool_group = "Day and Night"
}
= daynight_prop : "Sets the skin of a model depending on if it's day time or night time, example: A street lamp turning on and night time then turning off in the morning"
[
	model(studio) [report]: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) [ group="Render Properties" ] : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) [ group="Render Properties" ] : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	daymaterialgroup(integer) : "Day Material Group" : 0 : ""
	nightmaterialgroup(integer) : "Night Material Group" : 1 : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Gamelib.DayNight.DayNightSound
//
@PointClass base(BaseProperties_sbox_rts) iconsprite( "editor/daynight_sound.vmat" ) 
metadata
{
	entity_tool_name = "Sound"
	entity_tool_group = "Day and Night"
}
= daynight_sound : "A way to play sounds during the day night cycle, this also allows you to play a looping sound between 2 time periods e.g. 5pm to 6pm. You can also set the sound to only place once."
[
	soundtoplay(sound) : "Sound To Play" :  : ""
	timetoplay(integer) : "Time To Play" : 12 : ""
	timetostop(integer) : "Time To Stop" : -1 : ""
	deleteonplay(boolean) : "Delete On Play" : 0 : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// Gamelib.DayNight.DayNightWindow
//
@SolidClass base(BaseProperties_sbox_rts) 
metadata
{
	entity_tool_name = "Window Brush"
	entity_tool_group = "Day and Night"
}
= daynight_window : "A brush entity that will enable and disable at random times during the morning and night time"
[
	rendercolor(color255) : "FX Color (R G B)" : "255 255 255" : "The FX color is used by the selected Render Mode."
	renderamt(integer) [ group="Render Properties" ] : "FX Amount (0 - 255)" : 255 : "The FX amount is used by the selected Render Mode."
	enabledelay(float) : "Enable Delay Time" : 3 : ""
	disabledelay(float) : "Disable Delay Time" : 3 : ""
	enabled(boolean) : "Enabled" : 1 : "Whether this func_brush is visible/active at all"
	solid(boolean) : "Solid" : 1 : "Whether this func_brush has collisions"
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input DisableSolid(void) : "Make this func_brush non solid"
	input EnableSolid(void) : "Make this func_brush solid"
	input ToggleSolid(void) : "Toggle solidity of this func_brush"
	input Enable(void) : "Enable this func_brush, making it visible"
	input Disable(void) : "Disable this func_brush, making it invisible and non solid"
	input Toggle(void) : "Toggle this func_brush"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.Gamemode
//
@PointClass base(BaseProperties_sbox_rts) = rts : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// Facepunch.RTS.BuildingBlocker
//
@SolidClass base(BaseProperties_sbox_rts) 
metadata
{
	auto_apply_material = "materials/rts/hammer/building_blocker.vmat"
	entity_tool_name = "Building Blocker"
	entity_tool_group = "RTS"
}
= rts_building_blocker : "Blocks the ability to build inside the volume, but still allows units to pass through"
[
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// Facepunch.RTS.MiniMapEntity
//
@PointClass base(BaseProperties_sbox_rts) iconsprite( "editor/rts_minimap.vmat" ) 
metadata
{
	entity_tool_name = "MiniMap Config"
	entity_tool_group = "RTS"
}
= rts_minimap : "Provides configuration for the in-game minimap"
[
	texturepath(resource:png) : "Texture Path" :  : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// Facepunch.RTS.AircraftEntity
//
@PointClass base(BaseProperties_sbox_rts) = unit_aircraft : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.ApacheEntity
//
@PointClass base(BaseProperties_sbox_rts) = unit_apache : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.BuggyEntity
//
@PointClass base(BaseProperties_sbox_rts) = unit_buggy : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.DroneEntity
//
@PointClass base(BaseProperties_sbox_rts) = unit_drone : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.ObstacleEntity
//
@PointClass base(BaseProperties_sbox_rts) model() 
metadata
{
	entity_tool_name = "Obstacle"
	entity_tool_group = "RTS"
}
= rts_obstacle : "An entity to block units from passing through, They must destroy the obstacle to pass."
[
	model(studio) [report]: "World Model" : "models/rocks/rock_large_00.vmdl" : "The model this entity should use."
	skin(materialgroup) [ group="Render Properties" ] : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) [ group="Render Properties" ] : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	tooltipname(string) : "Tooltip Name" : "Obstacle" : ""
	maxhealth(float) : "Max Health" : 500 : ""
	destroysound(string) : "Destroy Sound" : "rts.buildingexplode1" : ""
	destroyeffect(string) : "Destroy Effect" : "particles/destruction_temp/destruction_temp.vpcf" : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.RadarJammerEntity
//
@PointClass base(BaseProperties_sbox_rts) = building_radar_jammer : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.TunnelEntity
//
@PointClass base(BaseProperties_sbox_rts) = building_tunnel : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.BeerResource
//
@PointClass base(BaseProperties_sbox_rts) model() = resource_beer : ""
[
	model(studio) [report]: "World Model" : "models/barrels/square_wooden_box_gold.vmdl" : "The model this entity should use."
	skin(materialgroup) [ group="Render Properties" ] : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) [ group="Render Properties" ] : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	stock(integer) : "Stock" : 0 : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.MetalResource
//
@PointClass base(BaseProperties_sbox_rts) model() = resource_metal : ""
[
	model(studio) [report]: "World Model" : "models/rocks/rock_large_00.vmdl" : "The model this entity should use."
	skin(materialgroup) [ group="Render Properties" ] : "Skin" : "Metal" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) [ group="Render Properties" ] : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	stock(integer) : "Stock" : 0 : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.PlasmaResource
//
@PointClass base(BaseProperties_sbox_rts) model() = resource_plasma : ""
[
	model(studio) [report]: "World Model" : "models/rocks/rock_large_00.vmdl" : "The model this entity should use."
	skin(materialgroup) [ group="Render Properties" ] : "Skin" : "Plasma" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) [ group="Render Properties" ] : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	stock(integer) : "Stock" : 0 : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.StoneResource
//
@PointClass base(BaseProperties_sbox_rts) model() = resource_stone : ""
[
	model(studio) [report]: "World Model" : "models/rocks/rock_large_00.vmdl" : "The model this entity should use."
	skin(materialgroup) [ group="Render Properties" ] : "Skin" : "Rock" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) [ group="Render Properties" ] : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	stock(integer) : "Stock" : 0 : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.AttackDroneWeapon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_attack_drone : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.ElectricAttackDroneWeapon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_electric_attack_drone : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.ElectricSniper
//
@PointClass base(BaseProperties_sbox_rts) = weapon_electric_sniper : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.Flamethrower
//
@PointClass base(BaseProperties_sbox_rts) = weapon_flamethrower : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.GrenadeLauncher
//
@PointClass base(BaseProperties_sbox_rts) = weapon_grenade_launcher : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.HellfireWeapon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_hellfire : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.HMG
//
@PointClass base(BaseProperties_sbox_rts) = weapon_hmg : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.Icethrower
//
@PointClass base(BaseProperties_sbox_rts) = weapon_icethrower : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.MedevacBeam
//
@PointClass base(BaseProperties_sbox_rts) = weapon_medevac : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.Pistol
//
@PointClass base(BaseProperties_sbox_rts) = weapon_pistol : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.PlasmaAttackDroneWeapon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_plasma_attack_drone : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.PlasmaHMG
//
@PointClass base(BaseProperties_sbox_rts) = weapon_plasma_hmg : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.PlasmaSMG
//
@PointClass base(BaseProperties_sbox_rts) = weapon_plasma_smg : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.PlasmaSniper
//
@PointClass base(BaseProperties_sbox_rts) = weapon_plasma_sniper : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.PlasmaTankCannon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_plasma_tank_cannon : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.RocketLauncher
//
@PointClass base(BaseProperties_sbox_rts) = weapon_rocket_launcher : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.SAMWeapon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_sam : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.SMG
//
@PointClass base(BaseProperties_sbox_rts) = weapon_smg : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.Sniper
//
@PointClass base(BaseProperties_sbox_rts) = weapon_sniper : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.SuicideDroneWeapon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_suicide_drone : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.TankCannon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_tank_cannon : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.TeslaCoilWeapon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_tesla_coil : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Facepunch.RTS.TurretWeapon
//
@PointClass base(BaseProperties_sbox_rts) = weapon_turret : ""
[
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

